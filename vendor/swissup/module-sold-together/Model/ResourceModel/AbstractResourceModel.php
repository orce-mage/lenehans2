<?php

namespace Swissup\SoldTogether\Model\ResourceModel;

use Magento\Framework\Model\ResourceModel\Db\AbstractDb;

abstract class AbstractResourceModel extends AbstractDb
{
    /**
     * Check DB table if there duplicated relations
     *
     * @return boolean
     */
    public function isCondenseDataRequired()
    {
        $select = $this->getCondenseDataSelect();
        $select->reset(\Zend_Db_Select::COLUMNS)
            ->columns(['count' => 'count(1)'])
            ->having('count > 1');
        return (bool)$this->getConnection()->fetchRow($select);
    }

    /**
     * Prepare select to get condensed data (duplicated relations removed)
     *
     * @return \Zend_Db_Select
     */
    protected function getCondenseDataSelect()
    {
        $select = $this->getConnection()->select()->from(
            $this->getMainTable(),
            [
                'product_id',
                'related_id',
                'store_id',
                'product_name' => 'min(product_name)',
                'related_name' => 'min(related_name)',
                'weight' => 'max(weight)',
                'is_admin' => 'max(is_admin)'
            ]
        )
        ->group(['product_id', 'related_id', 'store_id']);

        return $select;
    }

    /**
     * Execute relations data condense
     *
     * @return void
     */
    public function condenseData()
    {
        // find last relation ID
        $select = $this->getConnection()->select()->from(
            $this->getMainTable(),
            ['relation_id' => 'max(relation_id)']
        );
        $data = $this->getConnection()->fetchRow($select);
        if (!$data || !isset($data['relation_id'])) {
            return;
        }

        $lastOldDataId = $data['relation_id'];
        // preapre insert into table query
        $columns = [
            'product_id',
            'related_id',
            'store_id',
            'product_name',
            'related_name',
            'weight',
            'is_admin'
        ];
        $query = sprintf(
            'INSERT INTO %s(%s) %s',
            $this->getMainTable(),
            implode(', ', $columns),
            (string)$this->getCondenseDataSelect()
        );
        // execute insert query
        $this->getConnection()->query($query);
        // delete old data
        $this->getConnection()->delete(
            $this->getMainTable(),
            ['relation_id <= ?' => $lastOldDataId]
        );
    }

    /**
     * Delete auto generated relations
     *
     * @return void
     */
    public function deleteAutogeneratedRelations()
    {
        $connection = $this->getConnection();
        $connection->delete(
            $this->getMainTable(),
            ['is_admin=?' => 0]
        );
    }

    /**
     * Delete product relations
     *
     * @param  int $productId
     * @return void
     */
    public function deleteProductRelations($productId)
    {
        $connection = $this->getConnection();
        $connection->delete(
            $this->getMainTable(),
            ['product_id=?' => $productId]
        );
    }

    /**
     * Get related products data
     *
     * @param  int $productId
     * @return array
     */
    public function getRelatedProductData($productId)
    {
        $connection = $this->getConnection();
        $select = $connection->select()->from(
                $this->getMainTable(),
                ['related_id', 'weight']
            )
            ->where('product_id = ?', $productId)
            ->order('weight DESC');

        return $connection->fetchAssoc($select);
    }

    /**
     * {@inheritdocs}
     */
    protected function _getLoadSelect($field, $value, $object)
    {
        $select = parent::_getLoadSelect($field, $value, $object);
        if ($field == 'product_id') {
            foreach (['related_id', 'store_id'] as $f) {
                if ($object->hasData($f)) {
                    $v = $object->getData($f);
                    $f = $this->getConnection()->quoteIdentifier(
                        sprintf('%s.%s', $this->getMainTable(), $f)
                    );
                    $select->where($f . '=?', $v);
                }
            }
        }

        return $select;
    }

}
