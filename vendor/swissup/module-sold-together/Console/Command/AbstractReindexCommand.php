<?php

namespace Swissup\SoldTogether\Console\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Helper\ProgressBar;

abstract class AbstractReindexCommand extends Command
{
    /**
     * @var string
     */
    protected $relationName = 'Abstarct';

    /**
     * @var string
     */
    protected $objectName = 'abstract';

    /**
     * @var integer
     */
    protected $pageSize = 5;

    /**
     * Indexer object for soldtogether data
     */
    protected $indexer;

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this->setName("swissup:soldtogether:{$this->objectName}:reindex")
            ->setDescription("Reindex \"{$this->relationName}\" relations.");
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // delete auto generated
        $output->writeln("Reindex \"{$this->relationName}\" relations.");
        $this->indexer->deleteAutogeneratedRelations();
        $output->writeln('Autogenerated relations cleared.');
        // prepare progress bar
        $count = $this->indexer->getItemsToProcessCount();
        $pageSize = $this->pageSize;
        $lastPage = $pageSize ? (ceil($count / $pageSize)) : 1;
        $progressBar = new ProgressBar($output, $count);
        $progressBar->setFormat("Indexing {$this->objectName}s - [%bar%] %percent:3s%%");
        $currPage = 0;
        do {
            $currPage++;
            $this->indexer->reindex($currPage, $pageSize);
            $progressBar->advance($pageSize);
        } while ($currPage < $lastPage);
        $output->write(PHP_EOL);
        // complete
        $output->writeln("Done. {$count} {$this->objectName}s processed.");
    }
}
